version: '3.8'
services:
  # Postgres Database
  postgres:
    image: postgres:13
    container_name: monitoring-postgres
    environment:
      POSTGRES_DB: monitoring_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secret_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d monitoring_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - monitoring-network

  # PgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4
    container_name: monitoring-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: secret_password
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - monitoring-network
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  # Zookeeper for Kafka Coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - monitoring-network

  # Apache Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:6.2.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - monitoring-network

  # Debezium Connect for Change Data Capture
  debezium:
    image: debezium/connect:1.9
    container_name: debezium-connect
    ports:
      - "8083"  # Changed external port to 8084
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_configs
      OFFSET_STORAGE_TOPIC: debezium_offsets
      BOOTSTRAP_SERVERS: kafka:9092
      HOST: 0.0.0.0  # Explicitly bind to all network interfaces
      REST_PORT: 8083
      REST_HOST_NAME: debezium-connect
    depends_on:
      - kafka
      - postgres
    networks:
      - monitoring-network

  # Redis for Caching and Message Queuing
  redis:
    image: redis:6.2-alpine
    container_name: monitoring-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - monitoring-network

  # Flask Application for Dashboard
  flask-app:
    build:
      context: ./flask-dashboard
      dockerfile: Dockerfile
    container_name: flask-dashboard
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - monitoring-network

volumes:
  postgres-data:
  redis-data:
  pgadmin-data:

networks:
  monitoring-network:
    driver: bridge